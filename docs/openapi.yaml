openapi: 3.1.0
info:
  title: Bank Cards API
  description: Система управления банковскими картами
  version: 1.0.0
servers:
  - url: http://localhost:8080
    description: Generated server url
tags:
  - name: Пользователи
    description: API для управления пользователями
  - name: Транзакции
    description: API для управления транзакциями
  - name: Аутентификация
    description: API для аутентификации пользователей
  - name: Карты
    description: API для управления банковскими картами
paths:
  "/api/users":
    get:
      tags:
        - Пользователи
      summary: Получить всех пользователей (только ADMIN)
      description: Возвращает список всех пользователей с пагинацией
      operationId: getAll
      parameters:
        - name: page
          in: query
          required: false
          schema:
            type: integer
            format: int32
            default: 1
        - name: limit
          in: query
          required: false
          schema:
            type: integer
            format: int32
            default: 10
        - name: sort
          in: query
          required: false
          schema:
            type: string
            default: id
        - name: direction
          in: query
          required: false
          schema:
            type: string
            default: asc
      responses:
        '200':
          description: Список пользователей
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/PagedModelUserDto"
        '403':
          description: Доступ запрещен
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/PagedModelUserDto"
      security:
        - bearerAuth: []
    put:
      tags:
        - Пользователи
      summary: Создать пользователя (только ADMIN)
      description: Создает нового пользователя в системе
      operationId: create
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/CreateUserRequest"
        required: true
      responses:
        '200':
          description: Пользователь создан
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/UserDto"
        '400':
          description: Пользователь уже существует
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/UserDto"
        '403':
          description: Доступ запрещен
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/UserDto"
      security:
        - bearerAuth: []
  "/api/cards":
    get:
      tags:
        - Карты
      summary: Получить все карты (только ADMIN)
      description: Возвращает список всех карт в системе с пагинацией
      operationId: getAll_1
      parameters:
        - name: page
          in: query
          required: false
          schema:
            type: integer
            format: int32
            default: 1
        - name: limit
          in: query
          required: false
          schema:
            type: integer
            format: int32
            default: 10
        - name: sort
          in: query
          required: false
          schema:
            type: string
            default: id
        - name: direction
          in: query
          required: false
          schema:
            type: string
            default: asc
      responses:
        '200':
          description: Список всех карт
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/PagedModelCardDto"
        '403':
          description: Доступ запрещен
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/PagedModelCardDto"
      security:
        - bearerAuth: []
    put:
      tags:
        - Карты
      summary: Создать новую карту (только ADMIN)
      description: Создает новую банковскую карту для пользователя
      operationId: create_1
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/CreateCardRequest"
        required: true
      responses:
        '200':
          description: Карта успешно создана
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/CreateCardResponse"
        '400':
          description: Пользователь не найден
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/CreateCardResponse"
        '403':
          description: Доступ запрещен
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/CreateCardResponse"
      security:
        - bearerAuth: []
  "/api/users/{id}/enabled":
    post:
      tags:
        - Пользователи
      summary: Включить/отключить пользователя (только ADMIN)
      description: Изменяет статус активности пользователя
      operationId: setEnabled
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
        - name: value
          in: query
          required: true
          schema:
            type: boolean
      responses:
        '200':
          description: Статус пользователя изменен
          content:
            application/json:
              schema:
                type: object
        '400':
          description: Пользователь не найден
          content:
            application/json:
              schema:
                type: object
        '403':
          description: Доступ запрещен
          content:
            application/json:
              schema:
                type: object
      security:
        - bearerAuth: []
  "/api/transactions/transfer":
    post:
      tags:
        - Транзакции
      summary: Перевод средств
      description: Выполняет перевод средств между картами
      operationId: transfer
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/TransactionRequest"
        required: true
      responses:
        '200':
          description: Перевод выполнен
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/TransactionDto"
        '400':
          description: Недостаточно средств
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/TransactionDto"
        '404':
          description: Карта не найдена
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/TransactionDto"
      security:
        - bearerAuth: []
  "/api/transactions/deposit":
    post:
      tags:
        - Транзакции
      summary: Пополнение счета (только ADMIN)
      description: Выполняет пополнение счета указанной карты
      operationId: createDeposit
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/DepositRequest"
        required: true
      responses:
        '200':
          description: Пополнение выполнено
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/TransactionDto"
        '400':
          description: Карта не найдена
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/TransactionDto"
        '403':
          description: Доступ запрещен
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/TransactionDto"
      security:
        - bearerAuth: []
  "/api/cards/{id}/block":
    post:
      tags:
        - Карты
      summary: Заблокировать карту
      description: Блокирует указанную карту
      operationId: block
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Карта заблокирована
          content:
            application/json:
              schema:
                type: object
        '400':
          description: Карта истекла
          content:
            application/json:
              schema:
                type: object
        '403':
          description: Доступ запрещен
          content:
            application/json:
              schema:
                type: object
      security:
        - bearerAuth: []
  "/api/cards/{id}/activate":
    post:
      tags:
        - Карты
      summary: Активировать карту (только ADMIN)
      description: Активирует указанную карту
      operationId: activate
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Карта активирована
          content:
            application/json:
              schema:
                type: object
        '400':
          description: Карта истекла
          content:
            application/json:
              schema:
                type: object
        '403':
          description: Доступ запрещен
          content:
            application/json:
              schema:
                type: object
      security:
        - bearerAuth: []
  "/api/auth":
    post:
      tags:
        - Аутентификация
      summary: Аутентификация пользователя
      description: Выполняет вход пользователя и возвращает JWT токен
      operationId: login
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/AuthRequest"
        required: true
      responses:
        '200':
          description: Успешная аутентификация
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/AuthResponse"
  "/api/users/{id}":
    get:
      tags:
        - Пользователи
      summary: Получить пользователя по ID (только ADMIN)
      description: Возвращает информацию о конкретном пользователе
      operationId: get
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Информация о пользователе
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/UserDto"
        '400':
          description: Пользователь не найден
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/UserDto"
        '403':
          description: Доступ запрещен
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/UserDto"
      security:
        - bearerAuth: []
  "/api/users/{id}/cards":
    get:
      tags:
        - Пользователи
      summary: Получить карты пользователя (только ADMIN)
      description: Возвращает список карт указанного пользователя с пагинацией
      operationId: getUserCards
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
        - name: page
          in: query
          required: false
          schema:
            type: integer
            format: int32
            default: 1
        - name: limit
          in: query
          required: false
          schema:
            type: integer
            format: int32
            default: 10
        - name: sort
          in: query
          required: false
          schema:
            type: string
            default: id
        - name: direction
          in: query
          required: false
          schema:
            type: string
            default: asc
      responses:
        '200':
          description: Список карт пользователя
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/PagedModelCardDto"
        '400':
          description: Пользователь не найден
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/PagedModelCardDto"
        '403':
          description: Доступ запрещен
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/PagedModelCardDto"
      security:
        - bearerAuth: []
  "/api/users/me":
    get:
      tags:
        - Пользователи
      summary: Получить информацию о текущем пользователе
      description: Возвращает информацию о текущем аутентифицированном пользователе
      operationId: me
      responses:
        '200':
          description: Информация о пользователе
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/UserDto"
      security:
        - bearerAuth: []
  "/api/transactions/user/{userId}":
    get:
      tags:
        - Транзакции
      summary: Получить транзакции по пользователю
      description: Возвращает список транзакций для указанного пользователя
      operationId: getByUser
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
            format: int64
        - name: page
          in: query
          required: false
          schema:
            type: integer
            format: int32
            default: 1
        - name: limit
          in: query
          required: false
          schema:
            type: integer
            format: int32
            default: 10
        - name: sort
          in: query
          required: false
          schema:
            type: string
            default: date
        - name: direction
          in: query
          required: false
          schema:
            type: string
            default: desc
      responses:
        '200':
          description: Список транзакций пользователя
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/PagedModelTransactionDto"
        '403':
          description: Доступ запрещен
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/PagedModelTransactionDto"
      security:
        - bearerAuth: []
  "/api/transactions/own":
    get:
      tags:
        - Транзакции
      summary: Получить собственные транзакции
      description: Возвращает список транзакций текущего пользователя с пагинацией
      operationId: own
      parameters:
        - name: page
          in: query
          required: false
          schema:
            type: integer
            format: int32
            default: 1
        - name: limit
          in: query
          required: false
          schema:
            type: integer
            format: int32
            default: 10
        - name: sort
          in: query
          required: false
          schema:
            type: string
            default: date
        - name: direction
          in: query
          required: false
          schema:
            type: string
            default: desc
      responses:
        '200':
          description: Список транзакций пользователя
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/PagedModelTransactionDto"
      security:
        - bearerAuth: []
  "/api/transactions/card/{cardId}":
    get:
      tags:
        - Транзакции
      summary: Получить транзакции по карте
      description: Возвращает список транзакций для указанной карты
      operationId: getByCard
      parameters:
        - name: cardId
          in: path
          required: true
          schema:
            type: integer
            format: int64
        - name: page
          in: query
          required: false
          schema:
            type: integer
            format: int32
            default: 1
        - name: limit
          in: query
          required: false
          schema:
            type: integer
            format: int32
            default: 10
        - name: sort
          in: query
          required: false
          schema:
            type: string
            default: date
        - name: direction
          in: query
          required: false
          schema:
            type: string
            default: desc
      responses:
        '200':
          description: Список транзакций карты
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/PagedModelTransactionDto"
        '403':
          description: Доступ запрещен
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/PagedModelTransactionDto"
      security:
        - bearerAuth: []
  "/api/cards/{id}":
    get:
      tags:
        - Карты
      summary: Получить карту по ID (только ADMIN)
      description: Возвращает информацию о конкретной карте
      operationId: get_1
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Информация о карте
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/CardDto"
        '400':
          description: Карта не найдена
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/CardDto"
        '403':
          description: Доступ запрещен
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/CardDto"
      security:
        - bearerAuth: []
    delete:
      tags:
        - Карты
      summary: Удалить карту (только ADMIN)
      description: Удаляет указанную карту из системы
      operationId: delete
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Карта удалена
          content:
            application/json:
              schema:
                type: object
        '400':
          description: Карта уже удалена
          content:
            application/json:
              schema:
                type: object
        '403':
          description: Доступ запрещен
          content:
            application/json:
              schema:
                type: object
      security:
        - bearerAuth: []
  "/api/cards/own":
    get:
      tags:
        - Карты
      summary: Получить собственные карты
      description: Возвращает список карт текущего пользователя с пагинацией
      operationId: own_1
      parameters:
        - name: page
          in: query
          required: false
          schema:
            type: integer
            format: int32
            default: 1
        - name: limit
          in: query
          required: false
          schema:
            type: integer
            format: int32
            default: 10
        - name: sort
          in: query
          required: false
          schema:
            type: string
            default: id
        - name: direction
          in: query
          required: false
          schema:
            type: string
            default: asc
      responses:
        '200':
          description: Список карт пользователя
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/PagedModelCardDto"
      security:
        - bearerAuth: []
components:
  schemas:
    UserDto:
      type: object
      description: DTO для представления пользователя
      properties:
        id:
          type: integer
          format: int64
          description: ID пользователя
        username:
          type: string
          description: Имя пользователя
        role:
          type: string
          description: Роль пользователя
          enum:
            - USER
            - ADMIN
        enabled:
          type: boolean
          description: Флаг активности пользователя
    CreateUserRequest:
      type: object
      description: Запрос на создание пользователя
      properties:
        username:
          type: string
          description: Имя пользователя
          example: user
          maxLength: 50
          minLength: 0
        password:
          type: string
          description: Пароль
          example: user
          minLength: 1
        role:
          type: string
          description: Роль пользователя
          enum:
            - USER
            - ADMIN
          example: USER
      required:
        - password
        - role
        - username
    CardDto:
      type: object
      description: DTO для представления банковской карты
      properties:
        id:
          type: integer
          format: int64
          description: ID карты
        number:
          type: string
          description: Номер карты
        holder:
          type: string
          description: Держатель карты
        expiryDate:
          type: string
          format: date
          description: Дата окончания действия
        status:
          type: string
          description: Статус карты
          enum:
            - ACTIVE
            - BLOCKED
            - EXPIRED
        balance:
          type: number
          description: Баланс карты
        deleted:
          type: boolean
          description: Флаг удаления карты
    CreateCardResponse:
      type: object
      description: Ответ на создание карты
      properties:
        number:
          type: string
          description: Номер карты
          example: 1234567812345678
        card:
          "$ref": "#/components/schemas/CardDto"
          description: Информация о созданной карте
    CreateCardRequest:
      type: object
      description: Запрос на создание карты
      properties:
        holder:
          type: string
          description: Держатель карты
          example: IVAN IVANOV
          maxLength: 100
          minLength: 0
        user:
          type: integer
          format: int64
          description: ID владельца карты
          example: 1
        expiry_date:
          type: string
          format: date
          description: Дата окончания действия карты
          example: '2025-12-31'
      required:
        - expiry_date
        - holder
        - user
    TransactionDto:
      type: object
      description: DTO для представления транзакции
      properties:
        id:
          type: integer
          format: int64
          description: ID транзакции
        from:
          type: integer
          format: int64
          description: ID карты отправителя
        to:
          type: integer
          format: int64
          description: ID карты получателя
        amount:
          type: number
          description: Сумма транзакции
        comment:
          type: string
          description: Комментарий к транзакции
        date:
          type: string
          format: date-time
          description: Дата и время транзакции
    TransactionRequest:
      type: object
      description: Запрос на перевод средств
      properties:
        from:
          type: integer
          format: int64
          description: ID карты отправителя
          example: 1
        to:
          type: integer
          format: int64
          description: ID карты получателя
          example: 2
        amount:
          type: number
          description: Сумма перевода
          example: 500
        comment:
          type: string
          description: Комментарий к переводу
          example: Оплата услуг
          maxLength: 100
          minLength: 0
      required:
        - amount
        - comment
        - from
        - to
    DepositRequest:
      type: object
      description: Запрос на пополнение счета
      properties:
        card:
          type: integer
          format: int64
          description: ID карты для пополнения
          example: 1
        amount:
          type: number
          description: Сумма пополнения
          example: 1000
      required:
        - amount
        - card
    AuthResponse:
      type: object
      description: Ответ на аутентификацию
      properties:
        token:
          type: string
          description: JWT
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
    AuthRequest:
      type: object
      description: Запрос на аутентификацию
      properties:
        username:
          type: string
          description: Имя пользователя
          example: admin
          maxLength: 50
          minLength: 0
        password:
          type: string
          description: Пароль
          example: admin
          minLength: 1
      required:
        - password
        - username
    PageMetadata:
      type: object
      properties:
        size:
          type: integer
          format: int64
        number:
          type: integer
          format: int64
        totalElements:
          type: integer
          format: int64
        totalPages:
          type: integer
          format: int64
    PagedModelUserDto:
      type: object
      properties:
        content:
          type: array
          items:
            "$ref": "#/components/schemas/UserDto"
        page:
          "$ref": "#/components/schemas/PageMetadata"
    PagedModelCardDto:
      type: object
      properties:
        content:
          type: array
          items:
            "$ref": "#/components/schemas/CardDto"
        page:
          "$ref": "#/components/schemas/PageMetadata"
    PagedModelTransactionDto:
      type: object
      properties:
        content:
          type: array
          items:
            "$ref": "#/components/schemas/TransactionDto"
        page:
          "$ref": "#/components/schemas/PageMetadata"
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
